import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
'''
data = pd.read_excel('input/building_v.xlsx').values
print(data[0])

lon_start = data[:, 5]
lat_start = data[:, 6]
lon_end = data[:, 7]
lat_end = data[:, 8]

# color = (data[:, 2] - min(data[:, 2])) / (max(data[:, 2]) - min(data[:, 2]))
color = list(np.random.rand(len(lon_start))) * 10


def lon2lon(lon):
	return float(lon[:3]) * 3600 + float(lon[4:6]) * 60 + float(lon[7:11])


def lat2lat(lat):
	return float(lat[:2]) * 3600 + float(lat[3:5]) * 60 + float(lat[6:10])

lon_start = [lon2lon(i) for i in lon_start]
lon_end = [lon2lon(i) for i in lon_end]

lat_start = [lat2lat(i) for i in lat_start]
lat_end = [lat2lat(i) for i in lat_end]

x_s = []
y_s = []
for i in range(len(lon_start)):
	x = np.linspace(lon_start[i], lon_end[i], 10)
	y = np.linspace(lat_start[i], lat_end[i], 10)
	x_s.extend(x)
	y_s.extend(y)


plt.scatter(x_s, y_s, c=color, cmap=plt.cm.autumn, edgecolor='none', clim=[10,300], s=[i*300 for i in color])
# plt.plot([lon_start[i], lon_end[i]], [lat_start[i], lat_end[i]], c=str(color[i]), linewidth=15)
plt.show()
'''

a = '''		10*ε	t_air_out[℃]	q[kW]	t_water_out[℃]	t_air_out_with_dew[℃]
0	0	10	28	0	28	28
1	0.102040816	10	26.62489652	2.5	28	26.65414299
2	0.204081633	9.999998497	25.24979346	4.999999249	27.99999684	25.30828639
3	0.306122449	9.999454694	23.87491453	7.49959102	27.99885486	23.96264914
4	0.408163265	9.990075109	22.50504519	9.990075109	27.97915773	22.62191495
5	0.510204082	9.945614176	21.16187568	12.43201772	27.88578977	21.30731272
6	0.612244898	9.836633593	19.88416657	14.75495039	27.65693055	20.05677864
7	0.714285714	9.651516321	18.70971645	16.89015356	27.26818427	18.90730737
8	0.816326531	9.398366511	17.66101883	18.79673302	26.73656967	17.88091404
9	0.918367347	9.095545323	16.74341561	20.46497698	26.10064518	17.26968745
10	1.020408163	8.76285508	15.95016752	21.9071377	25.40199567	16.99701928
11	1.12244898	8.416993728	15.26833893	23.14673275	24.67568683	16.76034345
12	1.224489796	8.070289687	14.68301991	24.21086906	23.94760834	16.55544161
13	1.326530612	7.731049957	14.17970822	25.12591236	23.23520491	16.37795626
14	1.428571429	7.40443198	13.74539578	25.91551193	22.54930716	16.22383188
15	1.530612245	7.093329017	13.36890791	26.59998381	21.89599093	16.08949319
16	1.632653061	7.123395652	13.04086913	27.19637308	21.27809587	15.97188145
17	1.734693878	7.26023292	12.75351087	27.71880333	20.69634988	15.86842279
18	1.836734694	7.380746225	12.50043293	28.17891042	20.1501582	15.77696989
19	1.93877551	7.487442532	12.27637068	28.58626566	19.6381385	15.69573784
20	2.040816327	7.582386202	12.07698898	28.94875058	19.15847524	15.62324376
21	2.142857143	7.66728178	11.89870826	29.27287294	18.70914917	15.55825385
22	2.244897959	7.743542014	11.73856177	29.56402647	18.28808283	15.49973876
23	2.346938776	7.812342952	11.5940798	29.82670119	17.89323	15.44683659
24	2.448979592	7.874668239	11.4631967	30.06465256	17.5226284	15.39882276
25	2.551020408	7.931344628	11.34417628	30.28103703	17.17442844	15.35508547
26	2.653061224	7.983070442	11.23555207	30.47852073	16.8469067	15.31510584
27	2.755102041	8.030438415	11.13607933	30.65936666	16.53846963	15.27844184
28	2.857142857	8.073954074	11.04469644	30.82550485	16.24765146	15.24471519
29	2.959183673	8.114050585	10.96049377	30.9785891	15.97310857	15.21360081
30	3.06122449	8.151100786	10.88268835	31.12004286	15.713612	15.18481809
31	3.163265306	8.185426993	10.81060331	31.2510967	15.4680391	15.15812384
32	3.265306122	8.217309004	10.74365109	31.37281885	15.23536495	15.13330648
33	3.367346939	8.246990689	10.68131955	31.48614039	15.01465392	15.11018117
34	3.469387755	8.274685415	10.62316063	31.59187594	14.8050517	15.0885859
35	3.571428571	8.300580555	10.56878083	31.69074085	14.6057778	15.06837811
36	3.673469388	8.324841225	10.51783343	31.78336553	14.41611862	15.04943196
37	3.775510204	8.347613426	10.47001181	31.87030739	14.23542114	15.03163603
38	3.87755102	8.369026664	10.425044	31.95206087	14.06308714	15.01489131
39	3.979591837	8.389196174	10.38268803	32.02906593	13.89856805	14.9991096
40	4.081632653	8.40822479	10.34272794	32.10171518	13.74136019	14.98421206
41	4.183673469	8.426204538	10.30497047	32.17035996	13.59100058	14.97012807
42	4.285714286	8.443217997	10.26924221	32.23531555	13.44706311	14.9567942
43	4.387755102	8.459339455	10.23538714	32.29686558	13.30915514	14.94415329
44	4.489795918	8.474635913	10.20326458	32.35526584	13.17691439	14.93215376
45	4.591836735	8.489167938	10.17274733	32.41074758	13.05000621	14.92074893
46	4.693877551	8.502990405	10.14372015	32.4635203	12.9281211	14.90989647
47	4.795918367	8.516153145	10.1160784	32.51377425	12.81097242	14.89955791
48	4.897959184	8.528701499	10.08972685	32.56168255	12.69829445	14.8896982
49	5	8.540676808	10.0645787	32.60740301	12.58984052	14.88028538'''


a = a.split('\n')[1:]
a = [np.array(ai.split('\t')) for ai in a]
a = pd.DataFrame(a).drop(0, axis=1).astype(float)

print(a)

color=['a', 'royalblue', 'darkorange', 'grey', 'gold', 'deepskyblue']

for i in range(len(a.values[0])):
	if i > 0 :
		plt.plot(a.values[:, i], c=color[i], linewidth=5)

plt.legend(['10*ε',	't_air_out[℃]',	'q[kW]',	't_water_out[℃]',	't_air_out_with_dew[℃]'])
plt.grid()
plt.show()













